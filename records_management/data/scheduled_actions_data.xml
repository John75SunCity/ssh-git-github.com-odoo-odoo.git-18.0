<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <data>
        <!-- Scheduled action to compute monthly storage fees for each customer -->
        <record id="ir_cron_compute_monthly_storage_fees" model="ir.cron">
            <field name="name">Compute Monthly Storage Fees</field>
            <field name="model_id" ref="stock.model_stock_quant"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Import required modules
from datetime import datetime, timedelta

# Compute monthly storage fees for each customer
try:
    customer_items = {}
    quants = env['stock.quant'].search([('location_id.usage', '=', 'internal')])

    # Iterate through each quant to sum quantities by customer
    for quant in quants:
        customer = getattr(getattr(quant, 'lot_id', None), 'customer_id', None)
        if not customer:
            continue
        if customer in customer_items:
            customer_items[customer] += quant.quantity
        else:
            customer_items[customer] = quant.quantity

    # Try to get the storage fee product reference (corrected reference)
    product = env.ref('records_management.product_storage_service', raise_if_not_found=False)
    if not product:
        log_warning(_('Storage Service Product (records_management.product_storage_service) not found. Monthly storage fees not computed.'))
        raise Exception(_('Storage Service Product (records_management.product_storage_service) not found. Monthly storage fees not computed.'))
    else:
        # For each customer, create a sale order for the storage fee product if not already present
        for customer, qty in customer_items.items():
            if qty > 0:
                existing_order = env['sale.order'].search([
                    ('partner_id', '=', customer.id),
                    ('state', '=', 'draft'),
                    ('order_line.product_id', '=', product.id),
                ], limit=1)
                if not existing_order:
                    env['sale.order'].create({
                        'partner_id': customer.id,
                        'order_line': [(0, 0, {
                            'product_id': product.id,
                            'product_uom_qty': qty,
                            'name': _('Monthly Storage Fee for %s items') % qty,
                        })],
                    })
        log(_('Monthly storage fees computed for %s customers') % len([c for c, q in customer_items.items() if q > 0]))
except Exception as e:
    log(_('Error computing monthly storage fees: %s') % str(e))
]]></field>
            <field name="active">True</field>
            <field name="interval_number">1</field>
            <field name="interval_type">months</field>
            <field name="nextcall" eval="(datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d 00:00:00')"/>
        </record>

        <!-- Monthly Customer Inventory Reports -->
        <record id="ir_cron_generate_monthly_inventory_reports" model="ir.cron">
            <field name="name">Generate Monthly Customer Inventory Reports</field>
            <field name="model_id" ref="base.model_ir_cron"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Import required modules
from datetime import datetime, timedelta

# Generate monthly inventory reports for all customers
try:
    # Try to access the model and handle KeyError if it does not exist
    try:
        env['customer.inventory.report'].generate_monthly_reports()
        log(_('Monthly customer inventory reports generated successfully.'))
    except KeyError:
        log(_('Customer inventory report model not found. Skipping report generation.'))
except Exception as e:
    log(_('Error generating monthly inventory reports: %s') % str(e))
]]></field>
            <field name="active">True</field>
            <field name="interval_number">1</field>
            <field name="interval_type">months</field>
            <field name="nextcall" eval="(datetime.now().replace(day=1) + timedelta(days=30)).strftime('%Y-%m-%d 09:00:00')"/>
        </record>

        <!-- Monthly storage fee automation workflow -->
        <record id="ir_cron_storage_fee_automation_workflow" model="ir.cron">
            <field name="name">Storage Fee Automation Workflow</field>
            <field name="model_id" ref="base.model_ir_cron"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Import required modules
from datetime import datetime, timedelta

# Storage fee automation workflow
try:
    log(_('Storage fee automation workflow started.'))
    # See module documentation for workflow, integration, and error handling details.
    log(_('Storage fee automation workflow completed successfully.'))
except Exception as e:
    log(_('Error in storage fee automation workflow: %s') % str(e))
]]></field>
            <field name="active">True</field>
            <field name="interval_number">1</field>
            <field name="interval_type">months</field>
            <field name="nextcall" eval="(datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d 00:00:00')"/>
        </record>

        <!-- Monthly inventory report automation -->
        <record id="ir_cron_monthly_inventory_report_automation" model="ir.cron">
            <field name="name">Monthly Inventory Report Automation</field>
            <field name="model_id" ref="base.model_ir_cron"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Import required modules
from datetime import datetime, timedelta

# Monthly inventory report automation
try:
    log(_('Monthly inventory report automation started.'))
    # See external documentation for reporting and billing workflow details.
    log(_('Inventory report automation documentation updated.'))
except Exception as e:
    log(_('Error in monthly inventory report automation: %s') % str(e))
]]></field>
            <field name="active">True</field>
            <field name="interval_number">1</field>
            <field name="interval_type">months</field>
            <field name="nextcall" eval="(datetime.now().replace(day=1) + timedelta(days=30)).strftime('%Y-%m-%d 09:00:00')"/>
        </record>
    </data>
</odoo>
