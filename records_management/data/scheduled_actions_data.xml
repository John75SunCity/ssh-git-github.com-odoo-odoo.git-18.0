<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <data>
        <!-- Scheduled action to compute monthly storage fees for each customer -->
        <record id="ir_cron_compute_monthly_storage_fees" model="ir.cron">
            <field name="name">Compute Monthly Storage Fees</field>
            <field name="model_id" ref="records_management.model_records_billing_config"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Call the storage fee computation method
env['records.billing.config'].compute_monthly_storage_fees()
]]></field>
            <field name="active" eval="True"/>
            <field name="interval_number" eval="1"/>
            <field name="interval_type">months</field>
            <field name="nextcall" eval="(datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d 00:00:00')"/>
        </record>

        <!-- Monthly Customer Inventory Reports -->
        <record id="ir_cron_generate_monthly_inventory_reports" model="ir.cron">
            <field name="name">Generate Monthly Customer Inventory Reports</field>
            <field name="model_id" ref="records_management.model_customer_inventory_report"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Call the monthly report generation method
try:
    env['customer.inventory.report'].generate_monthly_reports()
    log(_('Monthly customer inventory reports generated successfully.'))
except Exception as e:
    log(_('Error generating monthly inventory reports: %s') % str(e))
]]></field>
            <field name="active" eval="True"/>
            <field name="interval_number" eval="1"/>
            <field name="interval_type">months</field>
            <field name="nextcall" eval="(datetime.now().replace(day=1) + timedelta(days=30)).strftime('%Y-%m-%d 09:00:00')"/>
        </record>

        <!-- Monthly storage fee automation workflow -->
        <record id="ir_cron_storage_fee_automation_workflow" model="ir.cron">
            <field name="name">Storage Fee Automation Workflow</field>
            <field name="model_id" ref="records_management.model_records_billing_config"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Call the storage fee automation workflow method
try:
    env['records.billing.config'].run_storage_fee_automation_workflow()
except Exception as e:
    log(_('Error in storage fee automation workflow: %s') % str(e))
]]></field>
            <field name="active" eval="True"/>
            <field name="interval_number" eval="1"/>
            <field name="interval_type">months</field>
            <field name="nextcall" eval="(datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d 00:00:00')"/>
        </record>

        <!-- Monthly inventory report automation -->
        <record id="ir_cron_monthly_inventory_report_automation" model="ir.cron">
            <field name="name">Monthly Inventory Report Automation</field>
            <field name="model_id" ref="records_management.model_customer_inventory_report"/>
            <field name="state">code</field>
            <field name="code"><![CDATA[
# Call the monthly inventory report automation method
try:
    env['customer.inventory.report'].run_monthly_inventory_report_automation()
except Exception as e:
    log(_('Error in monthly inventory report automation: %s') % str(e))
]]></field>
            <field name="active" eval="True"/>
            <field name="interval_number" eval="1"/>
            <field name="interval_type">months</field>
            <field name="nextcall" eval="(datetime.now().replace(day=1) + timedelta(days=30)).strftime('%Y-%m-%d 09:00:00')"/>
        </record>
    </data>
</odoo>
