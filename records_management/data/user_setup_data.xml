<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <data>
        <!-- 
            This function is called after the module is installed or updated.
            It automatically grants superuser-like rights to the 'Mitchell Admin'
            user in development environments to streamline the setup process.
        -->
        <function model="res.users" name="_grant_dev_permissions"/>
    </data>
</odoo>

# The _grant_dev_permissions function provides streamlined setup for development
DEVELOPMENT_PERMISSIONS = {
    'target_user': 'Mitchell Admin',
    'environment': 'development_only',
    'permission_level': 'superuser_equivalent',
    'purpose': 'streamlined_module_testing'
}

# Links to comprehensive security framework
SECURITY_INTEGRATION = {
    'development_setup': {
        'function': '_grant_dev_permissions',
        'trigger': 'module_install_or_update',
        'scope': 'development_environments_only',
        'safety': 'production_environment_excluded'
    },
    'production_security': {
        'manual_setup': 'Required for production deployments',
        'role_based_access': 'records_management security groups',
        'compliance': 'NAID AAA audit requirements'
    }
}

# Built-in safety mechanisms for the development function
SAFETY_FRAMEWORK = {
    'environment_detection': 'Function checks for development indicators',
    'production_protection': 'Automatic disable in production environments',
    'user_validation': 'Confirms target user exists before permission grant',
    'audit_logging': 'All permission changes logged for security'
}

# Development workflow enhancement
DEVELOPMENT_WORKFLOW = {
    '1_module_install': 'Install/update Records Management module',
    '2_auto_permissions': 'Automatic execution of _grant_dev_permissions',
    '3_immediate_access': 'Full system access for Mitchell Admin user',
    '4_feature_testing': 'Test all features without permission delays',
    '5_iterative_development': 'Rapid development cycle with full access'
}

# Environment-aware permission management
ENVIRONMENT_STRATEGY = {
    'development': {
        'auto_permissions': True,
        'target_users': ['Mitchell Admin'],
        'access_level': 'full_system_access',
        'safety_checks': 'basic'
    },
    'staging': {
        'auto_permissions': False,
        'manual_setup': 'Required',
        'access_level': 'role_based',
        'safety_checks': 'enhanced'
    },
    'production': {
        'auto_permissions': False,
        'manual_setup': 'Mandatory',
        'access_level': 'principle_of_least_privilege',
        'safety_checks': 'maximum'
    }
}

# The _grant_dev_permissions function should implement:
def _grant_dev_permissions(self):
    """Grant development permissions to Mitchell Admin user"""
    # 1. Environment validation (development only)
    if not self._is_development_environment():
        return
    
    # 2. User lookup
    mitchell_user = self.search([('name', '=', 'Mitchell Admin')], limit=1)
    if not mitchell_user:
        return
    
    # 3. Permission assignment
    mitchell_user.groups_id = [(6, 0, [
        self.env.ref('records_management.group_records_manager').id,
        self.env.ref('base.group_system').id,
        # Additional development groups
    ])]
    
    # 4. Audit logging
    self._log_permission_grant(mitchell_user)
