<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <record id="ir_cron_compute_monthly_storage_fees" model="ir.cron">
            <field name="name">Compute Monthly Storage Fees</field>
            <field name="model_id" ref="stock.model_stock_quant"/>
            <field name="state">code</field>
            <field name="code">
# Import defaultdict to aggregate quantities per customer
from collections import defaultdict
import logging

_logger = logging.getLogger(__name__)

try:
    # Search for all internal stock quants
    quants = env['stock.quant'].search([('location_id.usage', '=', 'internal')])

    # Initialize a dictionary to store total quantity per customer
    customer_items = defaultdict(int)

    # Iterate through each quant to sum quantities by customer
    for quant in quants:
        if quant.lot_id and quant.lot_id.customer_id:
            customer = quant.lot_id.customer_id
            customer_items[customer] += quant.quantity

    # Try to get the storage fee product reference
    product = env.ref('records_management.service_storage_fee', raise_if_not_found=False)

    if not product:
        _logger.error('Storage Fee Product (records_management.service_storage_fee) not found. Monthly storage fees not computed.')
    else:
        # For each customer, create a sale order for the storage fee product
        for customer, qty in customer_items.items():
            if qty > 0:
                env['sale.order'].create({
                    'partner_id': customer.id,
                    'order_line': [(0, 0, {
                        'product_id': product.id,
                        'product_uom_qty': qty,
                        'name': 'Monthly Storage Fee for %s items' % qty,
                    })],
                })
except Exception as e:
    _logger.error('Error computing monthly storage fees: %s' % str(e))
</field>
            <field name="numbercall">-1</field>
            <field name="active">True</field>
            <field name="interval_number">1</field>
            <field name="interval_type">months</field>
            <field name="nextcall" eval="(datetime.now() + relativedelta(months=1)).strftime('%Y-%m-%d 00:00:00')"/>
        </record>
    </data>
</odoo>