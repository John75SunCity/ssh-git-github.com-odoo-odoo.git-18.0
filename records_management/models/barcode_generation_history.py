# -*- coding: utf-8 -*-
"""
Barcode Generation History Module

Tracks the generation, printing, and application of barcodes for products
and assets within the Records Management system. Provides a complete audit
trail for each barcode's lifecycle.

Author: Records Management System
Version: 18.0.6.0.0
License: LGPL-3
"""

from odoo import models, fields, api, _
from odoo.exceptions import UserError, ValidationError


class BarcodeGenerationHistory(models.Model):
    """
    Barcode Generation History

    Logs each instance of a barcode being generated, providing a full
    history for auditing, tracking, and validation purposes.
    """
    _name = 'barcode.generation.history'
    _description = 'Barcode Generation History'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'generation_date desc'
    _rec_name = 'name'

    # ============================================================================
    # CORE IDENTIFICATION FIELDS
    # ============================================================================
    name = fields.Char(
        string='Reference',
        required=True,
        tracking=True,
        index=True,
        copy=False,
        default=lambda self: _('New')
    )
    company_id = fields.Many2one(
        'res.company',
        string='Company',
        default=lambda self: self.env.company,
        required=True,
        index=True
    )
    user_id = fields.Many2one(
        'res.users',
        string='Responsible User',
        default=lambda self: self.env.user,
        tracking=True
    )
    active = fields.Boolean(
        string='Active',
        default=True,
        help="Set to false to archive this history record."
    )

    # ============================================================================
    # BUSINESS SPECIFIC FIELDS
    # ============================================================================
    state = fields.Selection([
        ('draft', 'Draft'),
        ('generated', 'Generated'),
        ('printed', 'Printed'),
        ('applied', 'Applied'),
        ('cancelled', 'Cancelled'),
    ], string='Status', default='draft', required=True, tracking=True)

    product_id = fields.Many2one(
        'barcode.product',
        string='Product',
        required=True,
        help="The product for which the barcode was generated."
    )
    barcode_generated = fields.Char(
        string='Generated Barcode',
        readonly=True,
        copy=False,
        help="The actual barcode value that was generated."
    )
    generation_date = fields.Datetime(
        string='Generation Date',
        readonly=True,
        help="Timestamp when the barcode was generated."
    )
    generated_by_id = fields.Many2one(
        'res.users',
        string='Generated By',
        readonly=True,
        default=lambda self: self.env.user,
        help="User who initiated the barcode generation."
    )
    generation_method = fields.Selection([
        ('manual', 'Manual'),
        ('automatic', 'Automatic'),
        ('batch', 'Batch'),
    ], string='Generation Method', default='manual', help="Method used to generate the barcode.")

    barcode_format = fields.Selection([
        ('Code128', 'Code 128'),
        ('EAN13', 'EAN-13'),
        ('UPCA', 'UPC-A'),
        ('QR', 'QR Code'),
    ], string='Barcode Format', default='Code128', help="The format of the generated barcode.")

    sequence_number = fields.Integer(
        string='Sequence Number',
        readonly=True,
        help="The sequence number used for this barcode."
    )
    batch_id = fields.Char(
        string='Batch ID',
        help="Identifier for batch generation processes."
    )
    printed_date = fields.Datetime(
        string='Printed Date',
        readonly=True,
        help="Timestamp of the last time the barcode was printed."
    )
    applied_date = fields.Datetime(
        string='Applied Date',
        readonly=True,
        help="Timestamp when the barcode was applied to an asset."
    )
    print_count = fields.Integer(
        string='Print Count',
        default=0,
        readonly=True,
        help="Number of times this barcode has been printed."
    )
    partner_id = fields.Many2one(
        'res.partner',
        string='Applied To Partner',
        help="The customer or partner this barcode is associated with."
    )

    # ============================================================================
    # NOTES AND DOCUMENTATION
    # ============================================================================
    description = fields.Text(string='Description')
    notes = fields.Text(string='Internal Notes')

    # ============================================================================
    # MAIL THREAD FRAMEWORK FIELDS
    # ============================================================================
    activity_ids = fields.One2many('mail.activity', 'res_id', string='Activities')
    message_follower_ids = fields.One2many('mail.followers', 'res_id', string='Followers')
    message_ids = fields.One2many('mail.message', 'res_id', string='Messages')

    # ============================================================================
    # ACTION METHODS
    # ============================================================================
    def action_generate(self):
        """Generate the barcode and mark as generated."""
        self.ensure_one()
        if self.state != 'draft':
            raise UserError(_("Only draft records can be generated."))

        if not self.product_id:
            raise UserError(_("A product must be selected to generate a barcode."))

        # In a real scenario, this would call the barcode generation logic
        generated_barcode = f"{self.product_id.barcode_prefix or 'BC'}-{self.id}"

        self.write({
            "state": "generated",
            "generation_date": fields.Datetime.now(),
            "barcode_generated": generated_barcode,
        })
    self.message_post(body=_("Barcode generated: %s") % generated_barcode)

    def action_print(self):
        """Mark as printed and increment print count."""
        self.ensure_one()
        if self.state not in ['generated', 'printed']:
            raise UserError(_("Only generated barcodes can be printed."))

        self.write({
            "state": "printed",
            "printed_date": fields.Datetime.now(),
            "print_count": self.print_count + 1,
        })
    self.message_post(body=_("Barcode printed. Total prints: %s") % self.print_count)

        # This would typically return a report action to print the barcode label
        # return self.env.ref('records_management.action_report_barcode_label').report_action(self)

    def action_apply(self):
        """Mark as applied to an asset."""
        self.ensure_one()
        if self.state not in ['printed']:
            raise UserError(_("Only printed barcodes can be applied."))

        self.write({"state": "applied", "applied_date": fields.Datetime.now()})
        self.message_post(body=_("Barcode marked as applied."))

    def action_cancel(self):
        """Cancel the barcode history record."""
        self.ensure_one()
        if self.state == 'applied':
            raise UserError(_("Cannot cancel a barcode that has already been applied."))

        self.write({'state': 'cancelled'})
        self.message_post(body=_("Barcode generation record cancelled."))

    # ============================================================================
    # ORM OVERRIDES
    # ============================================================================
    @api.model_create_multi
    def create(self, vals_list):
        """Assign a sequence number on creation."""
        for vals in vals_list:
            if vals.get('name', _('New')) == _('New'):
                vals['name'] = self.env['ir.sequence'].next_by_code('barcode.generation.history') or _('New')
        return super().create(vals_list)

    # ============================================================================
    # VALIDATION METHODS
    # ============================================================================
    @api.constrains('print_count')
    def _check_print_count(self):
        """Validate that the print count is not negative."""
        for record in self:
            if record.print_count < 0:
                raise ValidationError(_("Print count cannot be negative."))
