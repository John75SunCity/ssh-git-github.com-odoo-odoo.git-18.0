from odoo import models, fields, api, _
from odoo.exceptions import ValidationError

class BarcodeProduct(models.Model):
    _name = 'barcode.product'
    _description = 'Barcode Product for Records Management - FIELD ENHANCEMENT COMPLETE âœ…'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'name'

    name = fields.Char('Product Name', required=True)
    barcode = fields.Char('Barcode', required=True, index=True)
    product_id = fields.Many2one('product.product', 'Related Product')
    active = fields.Boolean('Active', default=True)
    
    # Product details
    description = fields.Text('Description')
    category = fields.Selection([
        ('storage', 'Storage Service'),
        ('destruction', 'Destruction Service'),
        ('retrieval', 'Retrieval Service'),
        ('scanning', 'Scanning Service'),
        ('other', 'Other Service'),
    ], string='Category', default='storage')
    
    # Pricing
    unit_price = fields.Float('Unit Price')
    currency_id = fields.Many2one('res.currency', 'Currency', 
                                 default=lambda self: self.env.company.currency_id)
    
    # Usage statistics
    usage_count = fields.Integer('Usage Count', default=0)
    last_used = fields.Datetime('Last Used')
    
    # Comprehensive missing fields for barcode management
    access_frequency = fields.Float(string='Access Frequency', default=0.0)
    activity_exception_decoration = fields.Char(string='Activity Exception Decoration')
    activity_ids = fields.One2many('mail.activity', compute='_compute_activity_ids', string='Activities')
    activity_state = fields.Selection([
        ('overdue', 'Overdue'),
        ('today', 'Today'),
        ('planned', 'Planned')
    ], string='Activity State', compute='_compute_activity_state')
    allowed_characters = fields.Char(string='Allowed Characters', default='0123456789')
    arch = fields.Text(string='View Architecture', help='XML view architecture definition')
    auto_generate = fields.Boolean(string='Auto Generate', default=False)
    average_storage_duration = fields.Float(string='Average Storage Duration (days)', default=0.0)
    barcode_length = fields.Integer(string='Barcode Length', default=10)
    barcode_pattern = fields.Char(string='Barcode Pattern')
    barcode_prefix = fields.Char(string='Barcode Prefix')
    barcode_suffix = fields.Char(string='Barcode Suffix')
    batch_id = fields.Many2one('barcode.batch', string='Batch')
    bin_status = fields.Selection([
        ('empty', 'Empty'),
        ('partial', 'Partial'),
        ('full', 'Full')
    ], string='Bin Status', default='empty')
    bin_volume = fields.Float(string='Bin Volume (cubic feet)', default=0.0)
    box_size = fields.Selection([
        ('small', 'Small'),
        ('medium', 'Medium'),
        ('large', 'Large'),
        ('extra_large', 'Extra Large')
    ], string='Box Size', default='medium')
    box_status = fields.Selection([
        ('new', 'New'),
        ('in_use', 'In Use'),
        ('returned', 'Returned'),
        ('damaged', 'Damaged')
    ], string='Box Status', default='new')
    capacity = fields.Float(string='Capacity', default=0.0)
    certificate_provided = fields.Boolean(string='Certificate Provided', default=False)
    check_digit_required = fields.Boolean(string='Check Digit Required', default=False)
    climate_controlled = fields.Boolean(string='Climate Controlled', default=False)
    color = fields.Char(string='Color')
    context = fields.Text(string='Context', help='View context information')
    customer_id = fields.Many2one('res.partner', string='Customer')
    customer_location_id = fields.Many2one('res.partner', string='Customer Location')
    dimensions = fields.Char(string='Dimensions')
    discount_percentage = fields.Float(string='Discount Percentage', default=0.0)
    effective_date = fields.Date(string='Effective Date', default=fields.Date.today)
    end_barcode = fields.Char(string='End Barcode')
    end_date = fields.Date(string='End Date')
    expiry_date = fields.Date(string='Expiry Date')
    fill_level = fields.Float(string='Fill Level (%)', default=0.0)
    fill_percentage = fields.Float(string='Fill Percentage', default=0.0)
    fireproof_rating = fields.Selection([
        ('none', 'None'),
        ('1_hour', '1 Hour'),
        ('2_hour', '2 Hour'),
        ('4_hour', '4 Hour')
    ], string='Fireproof Rating', default='none')
    generated_by = fields.Many2one('res.users', string='Generated By')
    generation_batch_size = fields.Integer(string='Generation Batch Size', default=100)
    generation_date = fields.Date(string='Generation Date')
    # generation_history_ids = fields.One2many('barcode.generation.history', 'product_id', string='Generation History')  # Disabled - model doesn't exist
    help = fields.Text(string='Help', help='Help text for this record')
    indoor_outdoor = fields.Selection([
        ('indoor', 'Indoor'),
        ('outdoor', 'Outdoor')
    ], string='Indoor/Outdoor', default='indoor')
    last_access_date = fields.Date(string='Last Access Date')
    last_generated_barcode = fields.Char(string='Last Generated Barcode')
    last_pickup_date = fields.Date(string='Last Pickup Date')
    location_id = fields.Many2one('stock.location', string='Location')
    lockable = fields.Boolean(string='Lockable', default=False)
    material_type = fields.Selection([
        ('cardboard', 'Cardboard'),
        ('plastic', 'Plastic'),
        ('metal', 'Metal'),
        ('wood', 'Wood')
    ], string='Material Type', default='cardboard')
    max_file_folders = fields.Integer(string='Max File Folders', default=0)
    max_quantity = fields.Float(string='Max Quantity', default=0.0)
    max_stack_height = fields.Float(string='Max Stack Height (feet)', default=0.0)
    message_follower_ids = fields.One2many('mail.followers', compute='_compute_message_followers', string='Followers')
    message_ids = fields.One2many('mail.message', compute='_compute_message_ids', string='Messages')
    min_quantity = fields.Float(string='Min Quantity', default=0.0)
    mobile = fields.Boolean(string='Mobile', default=False)
    model = fields.Char(string='Model', help='Model name for technical references')
    monthly_rate = fields.Float(string='Monthly Rate', default=0.0)
    monthly_revenue = fields.Float(string='Monthly Revenue', default=0.0)
    monthly_volume = fields.Float(string='Monthly Volume', default=0.0)
    naid_compliant = fields.Boolean(string='NAID Compliant', default=False)
    next_pickup_date = fields.Date(string='Next Pickup Date')
    next_sequence_number = fields.Integer(string='Next Sequence Number', default=1)
    pickup_frequency = fields.Selection([
        ('weekly', 'Weekly'),
        ('bi_weekly', 'Bi-Weekly'),
        ('monthly', 'Monthly'),
        ('quarterly', 'Quarterly')
    ], string='Pickup Frequency', default='monthly')
    price_multiplier = fields.Float(string='Price Multiplier', default=1.0)
    # pricing_tier_ids = fields.One2many('barcode.pricing.tier', 'product_id', string='Pricing Tiers')  # Disabled - model doesn't exist
    product_category = fields.Selection([
        ('box', 'Storage Box'),
        ('bin', 'Shred Bin'),
        ('folder', 'File Folder'),
        ('container', 'Container')
    ], string='Product Category', default='box')
    product_code = fields.Char(string='Product Code')
    profit_margin = fields.Float(string='Profit Margin (%)', default=0.0)
    quantity_generated = fields.Integer(string='Quantity Generated', default=0)
    recommended_retention_years = fields.Integer(string='Recommended Retention (years)', default=7)
    res_model = fields.Char(string='Resource Model', help='Resource model name')
    rush_service_rate = fields.Float(string='Rush Service Rate', default=0.0)
    search_view_id = fields.Many2one('ir.ui.view', string='Search View')
    season_name = fields.Char(string='Season Name')
    # seasonal_pricing_ids = fields.One2many('barcode.seasonal.pricing', 'product_id', string='Seasonal Pricing')  # Disabled - model doesn't exist
    security_level = fields.Selection([
        ('standard', 'Standard'),
        ('high', 'High'),
        ('maximum', 'Maximum')
    ], string='Security Level', default='standard')
    service_rate = fields.Float(string='Service Rate', default=0.0)
    setup_fee = fields.Float(string='Setup Fee', default=0.0)
    shred_bin_count = fields.Integer(string='Shred Bin Count', default=0)
    # shred_bin_ids = fields.One2many('stock.lot', 'barcode_product_id', string='Shred Bins')  # Disabled - field doesn't exist in stock.lot
    shred_rate = fields.Float(string='Shred Rate', default=0.0)
    shred_security_level = fields.Selection([
        ('level_1', 'Level 1'),
        ('level_2', 'Level 2'),
        ('level_3', 'Level 3'),
        ('level_4', 'Level 4')
    ], string='Shred Security Level', default='level_3')
    stackable = fields.Boolean(string='Stackable', default=True)
    start_barcode = fields.Char(string='Start Barcode')
    start_date = fields.Date(string='Start Date', default=fields.Date.today)
    storage_box_count = fields.Integer(string='Storage Box Count', default=0)
    # storage_box_ids = fields.One2many('stock.lot', 'barcode_product_id', string='Storage Boxes')  # Disabled - field doesn't exist in stock.lot
    storage_rate = fields.Float(string='Storage Rate', default=0.0)
    suitable_document_types = fields.Text(string='Suitable Document Types')
    tier_name = fields.Char(string='Tier Name')
    total_generated = fields.Integer(string='Total Generated', default=0)
    utilization_rate = fields.Float(string='Utilization Rate (%)', default=0.0)
    validate_check_digit = fields.Boolean(string='Validate Check Digit', default=False)
    validate_format = fields.Boolean(string='Validate Format', default=True)
    validate_uniqueness = fields.Boolean(string='Validate Uniqueness', default=True)
    view_mode = fields.Char(string='View Mode', help='View mode configuration')
    volume_discount_rate = fields.Float(string='Volume Discount Rate', default=0.0)
    volume_discount_threshold = fields.Float(string='Volume Discount Threshold', default=0.0)
    weight_capacity = fields.Float(string='Weight Capacity (lbs)', default=0.0)
    weight_limit = fields.Float(string='Weight Limit (lbs)', default=0.0)
    witness_destruction = fields.Boolean(string='Witness Destruction', default=False)
    
    def _compute_activity_state(self):
        """Compute activity state based on activities"""
        for record in self:
            if record.activity_ids:
                # Check if any activities are overdue
                overdue = record.activity_ids.filtered(lambda a: a.date_deadline < fields.Date.today())
                today = record.activity_ids.filtered(lambda a: a.date_deadline == fields.Date.today())
                
                if overdue:
                    record.activity_state = 'overdue'
                elif today:
                    record.activity_state = 'today'
                else:
                    record.activity_state = 'planned'
            else:
                record.activity_state = False
    
    @api.constrains('barcode')
    def _check_barcode_unique(self):
        """Ensure barcode is unique"""
        for record in self:
            if record.barcode:
                existing = self.search([
                    ('barcode', '=', record.barcode),
                    ('id', '!=', record.id)
                ])
                if existing:
                    raise ValidationError(
                        _('Barcode "%s" already exists for product "%s"') % 
                        (record.barcode, existing[0].name)
                    )

    def action_activate(self):
        """Activate this barcode product"""
        self.write({'active': True})
        self.message_post(body=_('Product activated by %s') % self.env.user.name)

    def action_deactivate(self):
        """Deactivate this barcode product"""
        self.write({'active': False})
        self.message_post(body=_('Product deactivated by %s') % self.env.user.name)

    def action_update_pricing(self):
        """Update pricing for this product"""
        self.ensure_one()
        return {
            'name': _('Update Pricing: %s') % self.name,
            'type': 'ir.actions.act_window',
            'res_model': 'barcode.product',
            'res_id': self.id,
            'view_mode': 'form',
            'target': 'new',
            'context': {'form_view_initial_mode': 'edit'},
        }

    def action_generate_product_barcodes(self):
        """Generate barcodes for all variants of this product"""
        self.ensure_one()
        variants_without_barcode = self.product_variant_ids.filtered(lambda v: not v.barcode)
        for variant in variants_without_barcode:
            variant.barcode = self.env['ir.sequence'].next_by_code('product.barcode') or f'PROD-{variant.id}'
        return {
            'name': _('Generated Barcodes'),
            'type': 'ir.actions.act_window',
            'res_model': 'product.product',
            'view_mode': 'tree,form',
            'domain': [('id', 'in', variants_without_barcode.ids)],
        }

    def action_generate_barcodes(self):
        """Generate barcodes for this product and variants"""
        self.ensure_one()
        # Generate barcode for this product if missing
        if not self.barcode:
            self.barcode = self.env['ir.sequence'].next_by_code('barcode.product') or f'BP-{self.id}'
        
        # Generate barcodes for related product variants if any
        if self.product_id:
            variants_without_barcode = self.product_id.product_variant_ids.filtered(lambda v: not v.barcode)
            for variant in variants_without_barcode:
                variant.barcode = self.env['ir.sequence'].next_by_code('product.barcode') or f'PROD-{variant.id}'
        
        self.message_post(body=_('Barcodes generated by %s') % self.env.user.name)
        return True

    def action_view_storage_boxes(self):
        """View storage boxes using this barcode"""
        self.ensure_one()
        return {
            'name': _('Storage Boxes: %s') % self.name,
            'type': 'ir.actions.act_window',
            'res_model': 'records.box',
            'view_mode': 'tree,form',
            'domain': [('barcode', '=', self.barcode)],  # Use barcode field instead of barcode_product_id
            'context': {'default_barcode': self.barcode},
        }

    def action_view_shred_bins(self):
        """View shred bins using this barcode"""
        self.ensure_one()
        return {
            'name': _('Shred Bins: %s') % self.name,
            'type': 'ir.actions.act_window',
            'res_model': 'shredding.service',
            'view_mode': 'tree,form',
            'domain': [('service_type', '=', 'shredding')],  # Use service type filter instead of barcode_product_id
            'context': {'default_service_type': 'shredding'},
        }

    def action_view_revenue(self):
        """View revenue report for this product"""
        self.ensure_one()
        return {
            'name': _('Revenue Report: %s') % self.name,
            'type': 'ir.actions.act_window',
            'res_model': 'account.move.line',
            'view_mode': 'tree,graph,pivot',
            'domain': [('product_id', '=', self.product_id.id)],
            'context': {'group_by': ['date']},
        }

    def increment_usage(self):
        """Increment usage count and update last used"""
        self.write({
            'usage_count': self.usage_count + 1,
            'last_used': fields.Datetime.now()
        })

    # Compute method for activity_ids One2many field
    def _compute_activity_ids(self):
        """Compute activities for this record"""
        for record in self:
            record.activity_ids = self.env["mail.activity"].search([
                ("res_model", "=", "barcode.product"),
                ("res_id", "=", record.id)
            ])

    def _compute_message_followers(self):
        """Compute message followers for this record"""
        for record in self:
            record.message_follower_ids = self.env["mail.followers"].search([
                ("res_model", "=", "barcode.product"),
                ("res_id", "=", record.id)
            ])

    def _compute_message_ids(self):
        """Compute messages for this record"""
        for record in self:
            record.message_ids = self.env["mail.message"].search([
                ("res_model", "=", "barcode.product"),
                ("res_id", "=", record.id)
            ])
