from odoo import models, fields, api, _
from odoo.exceptions import ValidationError

class BarcodeProduct(models.Model):
    _name = 'barcode.product'
    _description = 'Barcode Product for Records Management - FIELD ENHANCEMENT COMPLETE ✅'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'name'

    name = fields.Char('Product Name', required=True)
    barcode = fields.Char('Barcode', required=True, index=True)
    product_id = fields.Many2one('product.product', 'Related Product')
    active = fields.Boolean('Active', default=True)
    
    # Product details
    description = fields.Text('Description')
    category = fields.Selection([)
        ('storage', 'Storage Service'),
        ('destruction', 'Destruction Service'),
        ('retrieval', 'Retrieval Service'),
        ('scanning', 'Scanning Service'),
        ('other', 'Other Service')
    ], string="Category")
    
    # Pricing
    unit_price = fields.Float('Unit Price')
    currency_id = fields.Many2one('res.currency', 'Currency', 
                                 default=lambda self: self.env.company.currency_id)
    
    # Usage statistics
    usage_count = fields.Integer('Usage Count', default=0)
    last_used = fields.Datetime('Last Used')
    
    # Comprehensive missing fields for barcode management
    access_frequency = fields.Float(string='Access Frequency', default=0.0)
    
    # Barcode Generation and Management
    allowed_characters = fields.Char(string='Allowed Characters', default='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')
    auto_generate = fields.Boolean(string='Auto Generate Barcodes', default=False)
    barcode_length = fields.Integer(string='Barcode Length', default=13)
    barcode_pattern = fields.Char(string='Barcode Pattern', help='Pattern for barcode generation')
    barcode_prefix = fields.Char(string='Barcode Prefix')
    barcode_suffix = fields.Char(string='Barcode Suffix')
    check_digit_required = fields.Boolean(string='Check Digit Required', default=True)
    validate_check_digit = fields.Boolean(string='Validate Check Digit', default=True)
    validate_format = fields.Boolean(string='Validate Format', default=True)
    validate_uniqueness = fields.Boolean(string='Validate Uniqueness', default=True)
    
    # Batch and Generation Management
    batch_id = fields.Many2one('barcode.generation.batch', string='Generation Batch')
    generation_date = fields.Datetime(string='Generation Date', default=fields.Datetime.now)
    generated_by = fields.Many2one('res.users', string='Generated By', default=lambda self: self.env.user)
    generation_batch_size = fields.Integer(string='Generation Batch Size', default=100)
    generation_history_ids = fields.One2many('barcode.generation.history', 'product_id', string='Generation History')
    last_generated_barcode = fields.Char(string='Last Generated Barcode')
    next_sequence_number = fields.Integer(string='Next Sequence Number', default=1)
    quantity_generated = fields.Integer(string='Quantity Generated', default=0)
    total_generated = fields.Integer(string='Total Generated', compute='_compute_total_generated')
    
    # Range Management
    start_barcode = fields.Char(string='Start Barcode')
    end_barcode = fields.Char(string='End Barcode')
    start_date = fields.Date(string='Start Date')
    end_date = fields.Date(string='End Date')
    expiry_date = fields.Date(string='Expiry Date')
    
    # Customer and Location Management
    customer_id = fields.Many2one('res.partner', string='Customer')
    customer_location_id = fields.Many2one('res.partner', string='Customer Location')
    location_id = fields.Many2one('stock.location', string='Storage Location')
    
    # Physical Specifications
    dimensions = fields.Char(string='Dimensions (L×W×H')
    weight_capacity = fields.Float(string='Weight Capacity (lbs)')
    weight_limit = fields.Float(string='Weight Limit (lbs)')
    capacity = fields.Float(string='Storage Capacity (cubic ft)')
    box_size = fields.Selection([)
        ('letter', 'Letter'),
        ('legal', 'Legal'),
        ('x-ray', 'X-Ray'),
        ('oversize', 'Oversize')
    ], string="Box Size")
    material_type = fields.Selection([)
        ('cardboard', 'Cardboard'),
        ('plastic', 'Plastic'),
        ('metal', 'Metal'),
        ('wood', 'Wood')
    ], string="Material Type")
    
    # Status and Condition
    box_status = fields.Selection([)
        ('new', 'New'),
        ('good', 'Good'),
        ('fair', 'Fair'),
        ('poor', 'Poor'),
        ('damaged', 'Damaged')
    ], string="Box Status")
    bin_status = fields.Selection([)
        ('empty', 'Empty'),
        ('partial', 'Partial'),
        ('full', 'Full'),
        ('overflow', 'Overflow')
    
    # Capacity and Volume Management), string="Selection Field"
    bin_volume = fields.Float(string='Bin Volume (cubic ft)')
    fill_level = fields.Float(string='Fill Level (%)', default=0.0)
    fill_percentage = fields.Float(string='Fill Percentage', compute='_compute_fill_percentage')
    max_quantity = fields.Float(string='Maximum Quantity')
    min_quantity = fields.Float(string='Minimum Quantity')
    max_file_folders = fields.Integer(string='Max File Folders')
    max_stack_height = fields.Float(string='Max Stack Height (inches)')
    utilization_rate = fields.Float(string='Utilization Rate (%)', compute='_compute_utilization_rate')
    
    # Features and Capabilities
    stackable = fields.Boolean(string='Stackable', default=True)
    lockable = fields.Boolean(string='Lockable', default=False)
    mobile = fields.Boolean(string='Mobile', default=False)
    climate_controlled = fields.Boolean(string='Climate Controlled', default=False)
    fireproof_rating = fields.Selection([)
        ('none', 'None'),
        ('1hour', '1 Hour'),
        ('2hour', '2 Hour'),
        ('4hour', '4 Hour'), string="Selection Field")
    indoor_outdoor = fields.Selection([)
        ('indoor', 'Indoor'),
        ('outdoor', 'Outdoor'),
        ('both', 'Both')
    
    # Service and Security), string="Selection Field"
    security_level = fields.Selection([)
        ('basic', 'Basic'),
        ('enhanced', 'Enhanced'),
        ('maximum', 'Maximum'), string="Selection Field")
    naid_compliant = fields.Boolean(string='NAID Compliant', default=True)
    witness_destruction = fields.Boolean(string='Witness Destruction', default=False)
    certificate_provided = fields.Boolean(string='Certificate Provided', default=True)
    
    # Pricing and Financial
    monthly_rate = fields.Float(string='Monthly Storage Rate')
    setup_fee = fields.Float(string='Setup Fee')
    storage_rate = fields.Float(string='Storage Rate per Box')
    service_rate = fields.Float(string='Service Rate')
    shred_rate = fields.Float(string='Shredding Rate')
    rush_service_rate = fields.Float(string='Rush Service Rate')
    price_multiplier = fields.Float(string='Price Multiplier', default=1.0)
    discount_percentage = fields.Float(string='Discount Percentage', default=0.0)
    profit_margin = fields.Float(string='Profit Margin (%)')
    
    # Pricing Tiers and Seasonal
    pricing_tier_ids = fields.One2many('barcode.pricing.tier', 'product_id', string='Pricing Tiers')
    seasonal_pricing_ids = fields.One2many('barcode.seasonal.pricing', 'product_id', string='Seasonal Pricing')
    tier_name = fields.Char(string='Tier Name')
    season_name = fields.Char(string='Season Name')
    volume_discount_rate = fields.Float(string='Volume Discount Rate')
    volume_discount_threshold = fields.Float(string='Volume Discount Threshold')
    
    # Revenue and Analytics
    monthly_revenue = fields.Float(string='Monthly Revenue', compute='_compute_monthly_revenue')
    monthly_volume = fields.Float(string='Monthly Volume')
    average_storage_duration = fields.Float(string='Average Storage Duration (days)')
    
    # Document and Classification
    suitable_document_types = fields.Text(string='Suitable Document Types')
    recommended_retention_years = fields.Integer(string='Recommended Retention (Years)')
    product_category = fields.Many2one('product.category', string='Product Category')
    product_code = fields.Char(string='Product Code')
    
    # Shredding and Destruction - Fixed field references
    shred_bin_ids = fields.Many2many('shredding.bin', string='Related Shred Bins'  # Changed to Many2many to avoid inverse field issues)
    shred_bin_count = fields.Integer(string='Shred Bin Count', compute='_compute_shred_bin_count'  # Restored compute method)
    storage_box_ids = fields.Many2many('records.box', string='Related Storage Boxes'  # Changed to Many2many to avoid inverse field issues)
    storage_box_count = fields.Integer(string='Storage Box Count', compute='_compute_storage_box_count'  # Restored compute method)
    shred_security_level = fields.Selection([
        ('basic', 'Basic',)
        ('high', 'High'),
        ('maximum', 'Maximum'), string="Selection Field")
    shredding_type = fields.Selection([)
        ('strip_cut', 'Strip Cut'),
        ('cross_cut', 'Cross Cut'),
        ('micro_cut', 'Micro Cut'),
        ('disintegration', 'Disintegration')
    
    # Dates and Scheduling), string="Selection Field"
    last_access_date = fields.Date(string='Last Access Date')
    last_pickup_date = fields.Date(string='Last Pickup Date')
    next_pickup_date = fields.Date(string='Next Pickup Date')
    pickup_frequency = fields.Selection([)
        ('weekly', 'Weekly'),
        ('biweekly', 'Bi-weekly'),
        ('monthly', 'Monthly'),
        ('quarterly', 'Quarterly'),
        ('annual', 'Annual'),
        ('on_demand', 'On Demand')
    
    # Additional fields for complete coverage), string="Selection Field"
    color = fields.Char(string='Color')
    
    # Compute Methods
    @api.depends('generation_history_ids'
    def _compute_total_generated(self):
        for record in self:
            record.total_generated = sum(record.generation_history_ids.mapped('quantity'))
    
    @api.depends('fill_level', 'capacity')
    def _compute_fill_percentage(self):
        for record in self:
            if record.capacity:
    pass
                record.fill_percentage = (record.fill_level / record.capacity) * 100
            else:
                record.fill_percentage = 0.0
    
    @api.depends('fill_level', 'capacity')
    def _compute_utilization_rate(self):
        for record in self:
            if record.capacity:
    pass
                record.utilization_rate = (record.fill_level / record.capacity) * 100
            else:
                record.utilization_rate = 0.0
    
    @api.depends('monthly_rate', 'storage_box_count')
    def _compute_monthly_revenue(self):
        for record in self:
            record.monthly_revenue = record.monthly_rate * record.storage_box_count
    
    @api.depends('shred_bin_ids')
    def _compute_shred_bin_count(self):
        for record in self:
            record.shred_bin_count = len(record.shred_bin_ids)
    
    @api.depends('storage_box_ids')
    def _compute_storage_box_count(self):
        for record in self:
            record.storage_box_count = len(record.storage_box_ids)

# Related Models for One2many relationships
class BarcodeGenerationBatch(models.Model):
    _name = 'barcode.generation.batch'
    _description = 'Barcode Generation Batch'
    
    status = fields.Selection([)
        ('draft', 'Draft'),
        ('generated', 'Generated'),
        ('completed', 'Completed')

class BarcodeGenerationHistory(models.Model):
    _name = 'barcode.generation.history'
    _description = 'Barcode Generation History'
), string="Selection Field"
    start_code = fields.Char(string='Start Code')
    end_code = fields.Char(string='End Code')

class BarcodePricingTier(models.Model):
    _name = 'barcode.pricing.tier'
    _description = 'Barcode Product Pricing Tier'
    
    rate = fields.Float(string='Rate')

class BarcodeSeasonalPricing(models.Model):
    _name = 'barcode.seasonal.pricing'
    _description = 'Barcode Product Seasonal Pricing'
    
    is_active = fields.Boolean(string='Is Active', default=True)
    activity_exception_decoration = fields.Char(string='Activity Exception Decoration')