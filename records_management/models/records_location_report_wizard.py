# -*- coding: utf-8 -*-
from odoo import models, fields, api, _
from odoo.exceptions import ValidationError


class RecordsLocationReportWizard(models.TransientModel):
    """Records Location Report Wizard"

        Wizard for generating comprehensive location-based reports including:
            pass
    - Container inventory by location
        - Utilization statistics
    - Customer distribution
        - Capacity analysis

    _name = 'records.location.report.wizard'
    _description = 'Records Location Report Wizard'

        # ============================================================================
    # CORE CONFIGURATION FIELDS
        # ============================================================================
    name = fields.Char(
        string='Report Name',
        default='Location Report',
        required=True,
        help='Name for this location report':

    company_id = fields.Many2one(
        'res.company',
        string='Company',
        default=lambda self: self.env.company,
        required=True

    user_id = fields.Many2one(
        'res.users',
        string='Generated By',
        default=lambda self: self.env.user,
        readonly=True


        # ============================================================================
    # LOCATION SELECTION FIELDS
        # ============================================================================
    location_id = fields.Many2one(
        'records.location',
        string='Primary Location',
        required=True,
        help='Primary location for the report':

    include_child_locations = fields.Boolean(
        string='Include Child Locations',
        default=True,
        help='Include sub-locations in the report'

    specific_location_ids = fields.Many2many(
        'records.location',
        string='Additional Locations',
        help='Additional specific locations to include'


        # ============================================================================
    # DATE RANGE FIELDS
        # ============================================================================
    report_date = fields.Date(
        string='Report Date',
        default=fields.Date.today,
        required=True,
        help='Date for the report snapshot':

    include_date_range = fields.Boolean(
        string='Include Date Range Analysis',
        default=False,
        help='Include historical analysis for date range':

    date_from = fields.Date(
        string='From Date',
        help='Start date for historical analysis':

    date_to = fields.Date(
        string='To Date',
        help='End date for historical analysis':


        # ============================================================================
    # CUSTOMER FILTER FIELDS
        # ============================================================================
    ,
    customer_filter = fields.Selection([))
        ('all', 'All Customers'),
        ('specific', 'Specific Customers'),
        ('department', 'By Department'),
        ('active_only', 'Active Customers Only')


    specific_customer_ids = fields.Many2many(
        'res.partner',
        string='Specific Customers',
        ,
    domain=[('is_company', '=', True)),
        help='Select specific customers for the report':

    department_id = fields.Many2one(
        'records.department',
        string='Department',
        help='Filter by records department'


        # ============================================================================
    # REPORT OPTIONS FIELDS
        # ============================================================================
    include_container_details = fields.Boolean(
        string='Include Container Details',
        default=True,
        help='Include detailed container information'

    include_utilization_stats = fields.Boolean(
        string='Include Utilization Statistics',
        default=True,
        help='Include capacity and utilization analysis'

    include_financial_summary = fields.Boolean(
        string='Include Financial Summary',
        default=False,
        help='Include revenue and billing information'

    include_charts = fields.Boolean(
        string='Include Charts and Graphs',
        default=True,
        help='Include visual charts in the report'


        # ============================================================================
    # OUTPUT FORMAT FIELDS
        # ============================================================================
    ,
    output_format = fields.Selection([))
        ('pdf', 'PDF'),
        ('excel', 'Excel'),
        ('html', 'HTML'),
        ('both', 'PDF and Excel')


    email_report = fields.Boolean(
        string='Email Report',
        default=False,
        help='Email the report to specified recipients'

    email_recipients = fields.Char(
        string='Email Recipients',
        help='Comma-separated email addresses'


        # ============================================================================
    # COMPUTED SUMMARY FIELDS
        # ============================================================================
    location_name = fields.Char(
        string='Location Name',
        related='location_id.name',
        readonly=True

    total_capacity = fields.Float(
        ,
    string='Total Capacity (CF)',
        compute='_compute_location_summary',
        help='Total cubic feet capacity'

    current_utilization = fields.Float(
        string='Current Utilization %',
        compute='_compute_location_summary',
        help='Current utilization percentage'

    container_count = fields.Integer(
        string='Container Count',
        compute='_compute_location_summary',
        help='Total number of containers'

    customer_count = fields.Integer(
        string='Customer Count',
        compute='_compute_location_summary',
        ,
    help='Number of unique customers'


        # ============================================================================
    # COMPUTE METHODS
        # ============================================================================
    @api.depends('location_id', 'include_child_locations')
    def _compute_location_summary(self):
        """Compute location summary statistics"""
        for wizard in self:
            if not wizard.location_id:
                wizard.total_capacity = 0.0
                wizard.current_utilization = 0.0
                wizard.container_count = 0
                wizard.customer_count = 0
                continue

            # Build location domain
            location_domain = [('id', '=', wizard.location_id.id))
            if wizard.include_child_locations and wizard.location_id.child_ids:
                child_ids = wizard.location_id.child_ids.ids
                location_domain = [('id', 'in', [wizard.location_id.id] + child_ids)]

            # Get containers for these locations:
            containers = self.env['records.container'].search([)]
                ('location_id', 'in', [loc.id for loc in self.env['records.location'].search(location_domain)]),:
                ('active', '=', True)


            # Calculate statistics
            wizard.total_capacity = sum(containers.mapped('volume') or [0.0])
            wizard.container_count = len(containers)
            wizard.customer_count = len(containers.mapped('partner_id'))

            # Calculate utilization (containers vs location capacity)
            if wizard.location_id.capacity_cubic_feet > 0:
                wizard.current_utilization = (wizard.total_capacity / wizard.location_id.capacity_cubic_feet) * 100
            else:
                wizard.current_utilization = 0.0

    # ============================================================================
        # CONSTRAINT VALIDATIONS
    # ============================================================================
    @api.constrains('date_from', 'date_to', 'include_date_range')
    def _check_date_range(self):
        """Validate date range configuration"""
        for wizard in self:
            if wizard.include_date_range:
                if not wizard.date_from or not wizard.date_to:
                    raise ValidationError(_('Both From Date and To Date are required for date range analysis')):
                if wizard.date_from > wizard.date_to:
                    raise ValidationError(_('From Date must be earlier than To Date'))

    @api.constrains('specific_customer_ids', 'customer_filter')
    def _check_customers(self):
        """Validate customer selection"""
        for wizard in self:
            if wizard.customer_filter == 'specific' and not wizard.specific_customer_ids:
                raise ValidationError(_('Please select at least one customer for specific customer filter')):
    @api.constrains('email_recipients', 'email_report')
    def _check_email(self):
        """Validate email configuration"""
        for wizard in self:
            if wizard.email_report and not wizard.email_recipients:
                raise ValidationError(_('Email recipients are required when email report is enabled'))

    # ============================================================================
        # ONCHANGE METHODS
    # ============================================================================
    @api.onchange('customer_filter')
    def _onchange_customer_filter(self):
        """Clear customer selections when filter changes"""
        if self.customer_filter != 'specific':
            self.specific_customer_ids = [(5, 0, 0)]
        if self.customer_filter != 'department':
            self.department_id = False

    # ============================================================================
        # ACTION METHODS
    # ============================================================================
    def action_generate_report(self):
        """Generate and return the location report"""
        self.ensure_one()
        self._validate_report_parameters()

        # Generate the report data
        report_data = self._prepare_report_data()

        if self.output_format == 'pdf':
            return self._generate_pdf_report(report_data)
        elif self.output_format == 'excel':
            return self._generate_excel_report(report_data)
        elif self.output_format == 'html':
            return self._generate_html_report(report_data)
        else:  # both
            # Generate both formats and email them
            pdf_report = self._generate_pdf_report(report_data)
            excel_report = self._generate_excel_report(report_data)

            if self.email_report:
                self._email_reports([pdf_report, excel_report])

            return pdf_report

    def _validate_report_parameters(self):
        """Validate all report parameters before generation"""
        if not self.location_id:
            raise ValidationError(_('Location is required for report generation')):
        if self.customer_filter == 'specific' and not self.specific_customer_ids:
            raise ValidationError(_('Please select specific customers'))

    def _prepare_report_data(self):
        """Prepare comprehensive report data"""
        return {}
            'wizard': self,
            'location_data': self._get_location_data(),
            'container_data': self._get_container_data(),
            'customer_data': self._get_customer_data(),
            'utilization_data': self._get_utilization_data(),
            'financial_data': self._get_financial_data() if self.include_financial_summary else {},:
            'generated_date': fields.Datetime.now(),
            'report_parameters': self._get_report_parameters()


    def _get_location_data(self):
        """Get location-specific data"""
        locations = [self.location_id]
        if self.include_child_locations:
            locations.extend(self.location_id.child_ids)

        return [{]}
            'location': loc,
            'containers': self.env['records.container'].search([('location_id', '=', loc.id)]),
            'capacity': loc.capacity_cubic_feet,
            'utilization': loc.utilization_percentage

    def _get_container_data(self):
        """Get container inventory data"""
        # Implementation would include container details, types, conditions, etc.
        return {}

    def _get_customer_data(self):
        """Get customer distribution data"""
        # Implementation would include customer analytics
        return {}

    def _get_utilization_data(self):
        """Get utilization statistics"""
        # Implementation would include detailed utilization analysis
        return {}

    def _get_financial_data(self):
        """Get financial summary data"""
        # Implementation would include revenue, billing, costs
        return {}

    def _get_report_parameters(self):
        """Get formatted report parameters"""
        return {}
            'report_name': self.name,
            'report_date': self.report_date,
            'location': self.location_id.name,
            'customer_filter': dict(self._fields['customer_filter'].selection)[self.customer_filter],
            'include_children': self.include_child_locations,
            'output_format': dict(self._fields['output_format'].selection)[self.output_format]


    def _generate_pdf_report(self, report_data):
        """Generate PDF report"""
        return self.env.ref('records_management.location_report_pdf').report_action()
            self, data=report_data


    def _generate_excel_report(self, report_data):
        """Generate Excel report"""
        # Implementation for Excel generation:
        return {}
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {}
                'message': _('Excel report generation feature coming soon'),
                'type': 'info'



    def _generate_html_report(self, report_data):
        """Generate HTML report"""
        # Implementation for HTML generation:
        return {}
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {}
                'message': _('HTML report generation feature coming soon'),
                'type': 'info'



    def _email_reports(self, reports):
        """Email reports to specified recipients"""
        if not self.email_recipients:
            return False

        # Basic email implementation
        mail_template = self.env.ref('records_management.location_report_email_template', raise_if_not_found=False)
        if mail_template:
            mail_template.send_mail(self.id, force_send=True)
        return True

    """")))))))))))))))))))
