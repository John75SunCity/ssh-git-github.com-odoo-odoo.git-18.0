from odoo import models, fields, api, _
from odoo.exceptions import UserError

class NAIDPerformanceHistory(models.Model):
    _name = 'naid.performance.history'
    _description = 'NAID Performance History'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'date_end desc, name'

    # ============================================================================
    # FIELDS
    # ============================================================================
    name = fields.Char(string='Reference', required=True, readonly=True, default=lambda self: _('New'))
    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company, readonly=True)

    date_start = fields.Date(string='Period Start Date', required=True)
    date_end = fields.Date(string='Period End Date', required=True)

    state = fields.Selection([
        ('draft', 'Draft'),
        ('generated', 'Generated'),
        ('cancelled', 'Cancelled'),
    ], string='Status', default='draft', readonly=True, tracking=True)

    # Performance Metrics
    certificates_issued_count = fields.Integer(string='Certificates Issued')
    destruction_weight_total = fields.Float(string='Total Weight Destroyed (kg)')
    avg_destruction_time_hours = fields.Float(string='Avg. Destruction Time (Hours)')
    compliance_alerts_triggered = fields.Integer(string='Compliance Alerts Triggered')
    audits_passed_count = fields.Integer(string='Audits Passed')
    audits_failed_count = fields.Integer(string='Audits Failed')

    notes = fields.Text(string='Summary & Notes')
    generated_by_id = fields.Many2one('res.users', string='Generated By', readonly=True)
    generation_date = fields.Datetime(string='Generation Date', readonly=True)
    compliance_id = fields.Many2one(
        comodel_name='naid.compliance',
        string='Compliance Record',
        ondelete='set null',
        index=True,
        help='NAID compliance master record for which this performance snapshot was taken.'
    )

    # ============================================================================
    # ACTION METHODS
    # ============================================================================
    def action_generate_snapshot(self):
        """Calculates and populates the performance metrics for the defined period."""
        self.ensure_one()
        if self.state != 'draft':
            raise UserError(_("Performance history can only be generated from a draft record."))

        # Example: Calculate Certificates Issued
        self.certificates_issued_count = self.env['naid.certificate'].search_count([
            ('issue_date', '>=', self.date_start),
            ('issue_date', '<=', self.date_end),
            ('state', '=', 'issued'),
        ])

        # Example: Calculate Total Weight
        certificates = self.env['naid.certificate'].search([
            ('issue_date', '>=', self.date_start),
            ('issue_date', '<=', self.date_end),
            ('state', '=', 'issued'),
        ])
        self.destruction_weight_total = sum(certificates.mapped('total_weight'))

        # Example: Calculate Compliance Alerts
        self.compliance_alerts_triggered = self.env['naid.compliance.alert'].search_count([
            ('alert_date', '>=', self.date_start),
            ('alert_date', '<=', self.date_end),
        ])

        self.write({
            'state': 'generated',
            'generated_by_id': self.env.user.id,
            'generation_date': fields.Datetime.now(),
        })
        self.message_post(body=_("Performance snapshot generated for the period."))

    def action_reset_to_draft(self):
        self.ensure_one()
        self.write({
            'state': 'draft',
            'certificates_issued_count': 0,
            'destruction_weight_total': 0.0,
            'avg_destruction_time_hours': 0.0,
            'compliance_alerts_triggered': 0,
            'audits_passed_count': 0,
            'audits_failed_count': 0,
            'generated_by_id': False,
            'generation_date': False,
        })
        self.message_post(body=_("Performance history reset to draft."))

    # ============================================================================
    # ORM OVERRIDES
    # ============================================================================
    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            if vals.get('name', _('New')) == _('New'):
                vals['name'] = self.env['ir.sequence'].next_by_code('naid.performance.history') or _('New')
        return super().create(vals_list)
