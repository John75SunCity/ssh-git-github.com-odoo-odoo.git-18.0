# -*- coding: utf-8 -*-
"""
Department Billing Contact
"""

from odoo import models, fields, api, _
from odoo.exceptions import UserError, ValidationError


class RecordsDepartmentBillingContact(models.Model):
    """
    Department Billing Contact
    """

    _name = "records.department.billing.contact"
    _description = "Department Billing Contact"
    _inherit = ["mail.thread", "mail.activity.mixin"]
    _order = "name"

    # Core fields
    name = fields.Char(string="Name", required=True, tracking=True)
    company_id = fields.Many2one("res.company", default=lambda self: self.env.company)
    user_id = fields.Many2one("res.users", default=lambda self: self.env.user)
    active = fields.Boolean(default=True)

    # Basic state management
    state = fields.Selection(
        [("draft", "Draft"), ("confirmed", "Confirmed"), ("done", "Done")],
        string="State",
        default="draft",
        tracking=True,
    )

    # Common fields
    description = fields.Text()
    notes = fields.Text()
    date = fields.Date(default=fields.Date.today)

    def action_approve_charge(self):
        """Approve individual charge for department."""
        self.ensure_one()
        if self.state != "confirmed":
            raise UserError(_("Only confirmed contacts can approve charges."))

        # Create charge approval activity
        self.activity_schedule(
            "mail.mail_activity_data_done",
            summary=_("Charge approved by: %s") % self.name,
            note=_(
                "Individual charge has been approved by department billing contact."
            ),
            user_id=self.user_id.id,
        )

        self.message_post(
            body=_("Charge approved by department contact: %s") % self.name,
            message_type="notification",
        )

        return {
            "type": "ir.actions.client",
            "tag": "display_notification",
            "params": {
                "title": _("Charge Approved"),
                "message": _("Charge has been approved by %s") % self.name,
                "type": "success",
                "sticky": False,
            },
        }

    def action_approve_charges(self):
        """Approve multiple charges for department."""
        self.ensure_one()
        if self.state != "confirmed":
            raise UserError(_("Only confirmed contacts can approve charges."))

        # Create bulk approval activity
        self.activity_schedule(
            "mail.mail_activity_data_done",
            summary=_("Bulk charges approved by: %s") % self.name,
            note=_(
                "Multiple charges have been approved by department billing contact."
            ),
            user_id=self.user_id.id,
        )

        self.message_post(
            body=_("Bulk charges approved by: %s") % self.name,
            message_type="notification",
        )

        return {
            "type": "ir.actions.act_window",
            "name": _("Approve Charges"),
            "res_model": "department.charge",
            "view_mode": "tree,form",
            "target": "current",
            "domain": [("contact_id", "=", self.id), ("state", "=", "pending")],
            "context": {
                "default_contact_id": self.id,
                "search_default_contact_id": self.id,
                "search_default_pending": True,
            },
        }

    def action_budget_report(self):
        """Generate department budget report."""
        self.ensure_one()

        # Create budget report activity
        self.activity_schedule(
            "mail.mail_activity_data_done",
            summary=_("Budget report generated by: %s") % self.name,
            note=_("Department budget report has been generated and reviewed."),
            user_id=self.user_id.id,
        )

        self.message_post(
            body=_("Budget report generated by: %s") % self.name,
            message_type="notification",
        )

        return {
            "type": "ir.actions.report",
            "report_name": "records_management.department_budget_report",
            "report_type": "qweb-pdf",
            "data": {"ids": self.ids},
            "context": self.env.context,
        }

    def action_send_bill_notification(self):
        """Send billing notification to department."""
        self.ensure_one()

        # Create notification activity
        self.activity_schedule(
            "mail.mail_activity_data_done",
            summary=_("Bill notification sent by: %s") % self.name,
            note=_("Billing notification has been sent to department members."),
            user_id=self.user_id.id,
        )

        self.message_post(
            body=_("Bill notification sent by: %s") % self.name,
            message_type="notification",
        )

        return {
            "type": "ir.actions.act_window",
            "name": _("Send Notification"),
            "res_model": "mail.compose.message",
            "view_mode": "form",
            "target": "new",
            "context": {
                "default_model": "records.department.billing.contact",
                "default_res_id": self.id,
                "default_composition_mode": "comment",
                "default_subject": _("Billing Notification from %s") % self.name,
                "default_body": _(
                    "Please review the attached billing information for your department."
                ),
            },
        }

    def action_view_approvals(self):
        """View all approvals by this contact."""
        self.ensure_one()

        return {
            "type": "ir.actions.act_window",
            "name": _("Approvals by: %s") % self.name,
            "res_model": "department.charge.approval",
            "view_mode": "tree,form",
            "target": "current",
            "domain": [("approved_by", "=", self.id)],
            "context": {
                "default_approved_by": self.id,
                "search_default_approved_by": self.id,
                "search_default_group_by_date": True,
            },
        }

    def action_view_department_charges(self):
        """View all charges for this department contact."""
        self.ensure_one()

        return {
            "type": "ir.actions.act_window",
            "name": _("Department Charges: %s") % self.name,
            "res_model": "department.charge",
            "view_mode": "tree,form",
            "target": "current",
            "domain": [("contact_id", "=", self.id)],
            "context": {
                "default_contact_id": self.id,
                "search_default_contact_id": self.id,
                "search_default_group_by_status": True,
            },
        }

    def action_confirm(self):
        """Confirm the record"""
        self.write({"state": "confirmed"})

    def action_done(self):
        """Mark as done"""
        self.write({"state": "done"})
