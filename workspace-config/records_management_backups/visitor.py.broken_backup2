# -*- coding: utf-8 -*-
import hashlib
from odoo import fields, models, api, _

class RecordsVisitor(models.Model):
    """Standalone visitor model for records management - compatible with Odoo 18.0"""
    _name = 'records.visitor'
    _description = 'Records Management Visitor'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'visit_date desc'
    
    # Basic visitor information
    name = fields.Char('Visitor Name', required=True, tracking=True
    email = fields.Char('Email', tracking=True)
    phone = fields.Char('Phone', tracking=True)
    company_name = fields.Char('Company', tracking=True)
    
    # Visit details
    visit_date = fields.Datetime('Visit Date', default=fields.Datetime.now, required=True, tracking=True
    visit_purpose = fields.Selection([('temp', 'Temporary')))
        ('shredding', 'Shredding Services'),
        ('document_pickup', 'Document Pickup'),
        ('consultation', 'Consultation'),
        ('delivery', 'Document Delivery'),
        ('audit', 'Audit/Inspection'),
        ('other', 'Other')], string='Visit Purpose', default='shredding', required=True, tracking=True
    # Records management specific fields
    pos_order_id = fields.Many2one('pos.order', string='Linked POS Transaction', readonly=True,
                                   help='Linked walk-in shredding transaction for auditing purposes.'
    is_shred_customer = fields.Boolean(string='Walk-in Shred Customer', default=False)
                                       help='Flag if this visitor is here for shredding services.'
    hashed_email = fields.Char(string='Hashed Email', compute='_compute_hashed_email', store=True)
                               help='ISO-compliant hashed version of email for secure auditing.'
    
    # Partner linking
    partner_id = fields.Many2one('res.partner', string='Related Partner', tracking=True
    
    # Visit Pattern Analytics
    visit_frequency_score = fields.Float(string='Visit Frequency Score',     compute='_compute_visit_analytics',     store=True,     help='Frequency pattern analysis for visitor',
    
    customer_loyalty_indicator = fields.Selection([('temp', 'Temporary')))
        ('new', 'New Visitor'),
        ('returning', 'Returning'),
        ('regular', 'Regular'),
        ('vip', 'VIP Customer')], string='Customer Loyalty'
       compute='_compute_visit_analytics',
       store=True,
       help='Customer loyalty classification based on visit patterns',
    
    # Service Analytics
    service_preference_score = fields.Float(string='Service Preference Score',     compute='_compute_service_analytics',     store=True,     help='Score indicating service preferences and history',
    

    # Status and workflow
    visit_status = fields.Selection([('temp', 'Temporary'))
        ('scheduled', 'Scheduled'),
        ('checked_in', 'Checked In'),
        ('in_service', 'In Service'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled')), string='Visit Status', default='scheduled'
    # Notes and comments
    notes = fields.Text('Visit Notes'
    internal_notes = fields.Text('Internal Notes')
    
    # Company context
    company_id = fields.Many2one('res.company', string='Company',
                                 default=lambda self: self.env.company

@api.depends('email')
    def _compute_hashed_email(self):
        """Compute hashed email for secure storage (ISO compliance)"""
        for record in self:
            if record.email:
        pass
                # Use SHA-256 for hashing email addresses
                hash_object = hashlib.sha256(record.email.encode()
                record.hashed_email = hash_object.hexdigest()
            else:
                record.hashed_email = False

    @api.depends('email', 'phone')
    def _compute_visit_analytics(self):
        """Compute visitor analytics based on historical data"""
        for record in self:
            # Count previous visits by same email or phone
            domain = [)
            if record.email:                domain.append(('email', '=', record.email)
            if record.phone:                if domain:                    domain = ['|') + domain + [('phone', '=', record.phone)]
                else:
                    domain = [('phone', '=', record.phone)]
            
            if domain:
        pass
                # Exclude current record if it's already saved
                if record.id:                    domain.append(('id', '!=', record.id)
                
                total_visits = self.search_count(domain) + 1  # +1 for current visit
            else:
                total_visits = 1
            
            # Calculate frequency score (0-100 scale
            if total_visits >= 10:                record.visit_frequency_score = 100
            elif total_visits >= 5:                record.visit_frequency_score = 75
            elif total_visits >= 2:                record.visit_frequency_score = 50
            else:
                record.visit_frequency_score = 25
            
            # Determine loyalty indicator
            if total_visits >= 10:                record.customer_loyalty_indicator = 'vip'
            elif total_visits >= 5:                record.customer_loyalty_indicator = 'regular'
            elif total_visits >= 2:                record.customer_loyalty_indicator = 'returning'
            else:
                record.customer_loyalty_indicator = 'new'
    
    @api.depends('is_shred_customer', 'pos_order_id'
    def _compute_service_analytics(self):
        """Compute service preference analytics"""
        for record in self:
            preference_score = 50  # Base score
            
            # Shredding service preference
            if record.is_shred_customer:                preference_score += 30
            
            # POS transaction indicates completed service
            if record.pos_order_id:                preference_score += 20
            
            record.service_preference_score = min(preference_score, 100

    @api.model_create_multi
    def create(self, vals_list):
        """Override create to auto-match or create partner for walk-in customers."""
        records = super(RecordsVisitor, self).create(vals_list)
        for record, vals in zip(records, vals_list):
            if vals.get('phone') or vals.get('email'):                partner = self.env['res.partner'].search([
                    '|', ('phone', '=', vals.get('phone'), ('email', '=', vals.get('email'))])
                ], limit=1
                if not partner:                    partner = self.env['res.partner'].create({)
                        'name': vals.get('name'),
                        'phone': vals.get('phone'),
                        'email': vals.get('email'),
                        'company_id': vals.get('company_id'),
                    }
                # Link to partner for POS compatibility
                record.write({'partner_id': partner.id}
        return records

    def action_link_pos(self):
        """Action to open wizard for linking/creating POS order from visitor."""
        self.ensure_one()
        return {
            'type': 'ir.actions.act_window',
            'name': _('Link Shred Transaction'),
            'res_model': 'visitor.pos.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {
                'default_visitor_id': self.id,
                'default_partner_id': self.partner_id.id if self.partner_id else False,
            },
        }
    
    def action_start_service(self):
        pass
        """Mark visitor as in service"""
        self.write({'visit_status': 'in_service'})
    
    def action_complete_service(self):
        """Mark visitor service as completed"""
        self.write({'visit_status': 'completed'})
    
    def action_cancel_visit(self):
        """Cancel the visitor's visit"""
        self.write({'visit_status': 'cancelled'})
