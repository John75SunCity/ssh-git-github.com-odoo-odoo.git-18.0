from odoo import http
import logging

_logger = logging.getLogger(__name__)

CUSTOMER_FIELD = 'customer_id'
INTERNAL_USAGE = 'internal'

class MyController(http.Controller):
    """
    Controller for managing inventory-related HTTP requests.
    """

    def _get_partner_inventory(self, partner):
        """
        Fetch inventory items associated with the given partner.
        Args:
            partner: res.partner record.
        Returns:
            Recordset of stock.quant matching the criteria.
        """
        serials = http.request.env['stock.production.lot'].search([(CUSTOMER_FIELD, '=', partner.id)])
        return http.request.env['stock.quant'].search([
            ('lot_id', 'in', serials.ids),
            ('location_id.usage', '=', INTERNAL_USAGE)
        ])

    def _parse_item_ids(self, form):
        """
        Helper to safely parse item_ids from form data.
        Args:
            form: werkzeug.form object.
        Returns:
            List of item_ids as integers, or None if parsing fails.
        """
        try:
            return [int(id) for id in form.getlist('item_ids')]
        except (ValueError, TypeError):
            return None

    @http.route('/my/inventory/request_pickup', type='http', auth='user', methods=['POST'], csrf=True)
    def request_pickup(self, **kw):
        """
        Handle inventory pickup requests for logged-in users.
        """
        user = http.request.env.user
        partner = user.partner_id
        _logger.info('Inventory accessed by partner ID %s', partner.id)

        item_ids = self._parse_item_ids(http.request.httprequest.form)
        if not item_ids:
            _logger.warning("User ID: %s provided invalid item_ids: %s", user.id, http.request.httprequest.form.getlist('item_ids'))
            # Redirect with error and user friendly message
            return http.request.redirect('/my/inventory?error=invalid_item_ids&message=Please+provide+valid+item+IDs.')

        _logger.info('Pickup requested for items %s by partner ID %s', item_ids, partner.id)
        # ...existing pickup processing code should be placed here...
        return http.request.redirect('/my/inventory?success=pickup_requested')

    @http.route('/my/inventory', type='http', auth='user', website=True, methods=['GET'], csrf=True)
    def my_inventory(self, **kw):
        """
        Display inventory relevant to the logged-in user.
        """
        user = http.request.env.user
        partner = user.partner_id
        quants = self._get_partner_inventory(partner)

        # Show error message from query parameters if present
        error = http.request.params.get('error')
        message = http.request.params.get('message', '')
        success = http.request.params.get('success')
        if error:
            message = message or 'There was a problem with your request.'
        elif not quants:
            message = 'No inventory items found. Please contact support if this issue persists.'
        elif success:
            message = 'Your pickup request has been submitted.'

        return http.request.render(
            'records_management.inventory_template',
            {
                'quants': quants,
                'message': message
            }
        )

    # ...other controller logic can be added here...
