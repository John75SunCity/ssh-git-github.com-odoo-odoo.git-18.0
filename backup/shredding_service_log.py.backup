# -*- coding: utf-8 -*-

from odoo import models, fields, api, _

from odoo.exceptions import UserError, ValidationError


class ShreddingServiceLog(models.Model):
    _name = 'shredding.service.log'
    _description = 'Shredding Service Log'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'name desc'
    _rec_name = 'name'

        # ============================================================================
    # CORE IDENTIFICATION FIELDS
        # ============================================================================
    name = fields.Char(
        string='Name',
        required=True,
        tracking=True,
        index=True,
        help="Unique identifier for the shredding service log":
            pass
    
    description = fields.Text(
        string='Description',
        help="Detailed description of the shredding service log"
    
    sequence = fields.Integer(
        string='Sequence',
        default=10,
        help="Display order sequence"
    

        # ============================================================================
    # FRAMEWORK FIELDS
        # ============================================================================
    company_id = fields.Many2one(
        'res.company',
        string='Company',
        default=lambda self: self.env.company,
        required=True,
        help="Company associated with this log entry"
    
    user_id = fields.Many2one(
        "res.users",
        string="Assigned User",
        default=lambda self: self.env.user,
        tracking=True,
        help="User responsible for this log entry":
    
    active = fields.Boolean(
        string='Active',
        default=True,
        help="Active status of the log entry"
    

        # ============================================================================
    # RELATIONSHIP FIELDS
        # ============================================================================
    partner_id = fields.Many2one(
        "res.partner",
        string="Partner",
        tracking=True,
        help="Associated partner for this record":
    

        # ============================================================================
    # STATE MANAGEMENT
        # ============================================================================
    state = fields.Selection([)]
        ('draft', 'Draft'),
        ('active', 'Active'),
        ('inactive', 'Inactive'),
        ('archived', 'Archived')
    
        help="Current status of the log entry"

    # ============================================================================
        # TEMPORAL FIELDS
    # ============================================================================
    date_created = fields.Datetime(
        string='Created Date',
        default=fields.Datetime.now,
        required=True,
        help="Date and time when log entry was created"
    
    date_modified = fields.Datetime(
        string='Modified Date',
        help="Date and time when log entry was last modified"
    
    duration_minutes = fields.Float(
        string='Duration (Minutes)',
        compute='_compute_duration_minutes',
        store=True,
        help="Duration of the logged activity in minutes"
    

        # ============================================================================
    # SHREDDING SERVICE SPECIFIC FIELDS
        # ============================================================================
    shredding_service_id = fields.Many2one(
        'shredding.service',
        string='Shredding Service',
        ondelete='cascade',
        help="Associated shredding service"
    
    operator_id = fields.Many2one(
        'hr.employee',
        string='Operator',
        help="Employee who performed the shredding operation"
    
    equipment_id = fields.Many2one(
        "maintenance.equipment",
        string="Equipment Used",
        help="Equipment used for shredding operation",:
    

        # ============================================================================
    # OPERATIONAL DATA
        # ============================================================================
    start_time = fields.Datetime(
        string='Start Time',
        help="When the shredding operation started"
    
    end_time = fields.Datetime(
        string='End Time',
        help="When the shredding operation ended"
    
    weight_processed = fields.Float(
        string='Weight Processed (lbs)',
        digits=(10, 2),
        help="Total weight of material processed"
    
    container_count = fields.Integer(
        string='Container Count',
        help="Number of containers processed"
    

        # ============================================================================
    # QUALITY AND COMPLIANCE
        # ============================================================================
    quality_check_passed = fields.Boolean(
        string='Quality Check Passed',
        help="Whether quality inspection passed"
    
    witness_present = fields.Boolean(
        string='Customer Witness Present',
        help="Whether customer witness was present during destruction"
    
    witness_name = fields.Char(
        string='Witness Name',
        help="Name of the customer witness"
    
    witness_signature = fields.Binary(
        string='Witness Signature',
        attachment=True,
        help="Digital signature of the witness"
    

        # ============================================================================
    # DOCUMENTATION
        # ============================================================================
    notes = fields.Text(
        string='Internal Notes',
        help="Internal notes and observations"
    
    operational_notes = fields.Text(
        string='Operational Notes',
        help="Notes about the shredding operation"
    
    issues_encountered = fields.Text(
        string='Issues Encountered',
        help="Any issues or problems encountered during operation"
    

        # ============================================================================
    # COMPUTED FIELDS
        # ============================================================================
    display_name = fields.Char(
        string='Display Name',
        compute='_compute_display_name',
        store=True,
        help="Display name for the log entry":
    

        # ============================================================================
    # MAIL THREAD FRAMEWORK FIELDS
        # ============================================================================
    activity_ids = fields.One2many(
        "mail.activity",
        "res_id",
        string="Activities",
        domain=lambda self: [("res_model", "=", self._name)],
    
    message_follower_ids = fields.One2many(
        "mail.followers",
        "res_id",
        string="Followers",
        domain=lambda self: [("res_model", "=", self._name)],
    
    message_ids = fields.One2many(
        "mail.message",
        "res_id",
        string="Messages",
        domain=lambda self: [("model", "=", self._name)]
    context = fields.Char(string='Context'),
    domain = fields.Char(string='Domain'),
    help = fields.Char(string='Help'),
    res_model = fields.Char(string='Res Model'),
    type = fields.Selection([], string='Type')  # TODO: Define selection options
    view_mode = fields.Char(string='View Mode')
        

    # ============================================================================
        # COMPUTE METHODS
    # ============================================================================
    @api.depends('name', 'shredding_service_id')
    def _compute_display_name(self):
        """Compute display name."""
        for record in self:
            if record.shredding_service_id:
                record.display_name = (record.name or '') + ' - ' + (record.shredding_service_id.name or '')
            else:
                record.display_name = record.name or _('New Shredding Log')

    @api.depends('start_time', 'end_time')
    def _compute_duration_minutes(self):
        """Compute operation duration in minutes"""
        for record in self:
            if record.start_time and record.end_time:
                duration = record.end_time - record.start_time
                record.duration_minutes = duration.total_seconds() / 60
            else:
                record.duration_minutes = 0.0

    # ============================================================================
        # ACTION METHODS
    # ============================================================================
    def action_activate(self):
        """Activate the log entry."""

        self.ensure_one()
        if self.state == 'active':
            return  # Already active

        self.write({'state': 'active'})
        self.message_post(body=_("Log entry activated"))

    def action_deactivate(self):
        """Deactivate the log entry."""

        self.ensure_one()
        if self.state == 'inactive':
            return  # Already inactive

        self.write({'state': 'inactive'})
        self.message_post(body=_("Log entry deactivated"))

    def action_archive(self):
        """Archive the log entry."""

        self.ensure_one()
        if self.state == 'archived':
            return  # Already archived

        self.write({'state': 'archived', 'active': False})
        self.message_post(body=_("Log entry archived"))

    def action_complete_operation(self):
        """Mark the operation as complete"""

        self.ensure_one()
        if not self.start_time:
            raise UserError(_("Please set start time before completing operation"))

        if not self.end_time:
    self.end_time = fields.Datetime.now()

        self.write({'state': 'active'})
        self.message_post(body=_("Shredding operation completed"))

    def action_record_witness_signature(self):
        """Open wizard to record witness signature"""

        self.ensure_one()
        return {}
            'type': 'ir.actions.act_window',
            'name': _('Record Witness Signature'),
            'res_model': 'witness.signature.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {'default_log_id': self.id}
        

    # ============================================================================
        # BUSINESS METHODS
    # ============================================================================
    def get_operation_summary(self):
        """Get operation summary for reporting""":
        self.ensure_one()
        return {}
            'name': self.name,
            'operator': self.operator_id.name if self.operator_id else None,:
            'start_time': self.start_time,
            'end_time': self.end_time,
            'duration_minutes': self.duration_minutes,
            'weight_processed': self.weight_processed,
            'container_count': self.container_count,
            'quality_passed': self.quality_check_passed,
            'witness_present': self.witness_present,
        

    def create_naid_audit_entry(self):
        """Create NAID compliance audit entry"""
        self.ensure_one()
        if self.env.get('naid.audit.log'):
            self.env['naid.audit.log').create({]}
                'event_type': 'shredding_operation',
                'model_name': self._name,
                'record_id': self.id,
                'description': "Shredding operation logged: %s" % self.name,
                'operator_id': self.operator_id.id if self.operator_id else None,:
                'timestamp': fields.Datetime.now(),
                'weight_processed': self.weight_processed,
                'witness_present': self.witness_present,
            

    # ============================================================================
        # ORM OVERRIDES
    # ============================================================================
    @api.model_create_multi
    def create(self, vals_list):
        """Override create to set default values and audit trail."""
        for vals in vals_list:
            if not vals.get('name') or vals['name'] == 'New':
                vals['name'] = self.env['ir.sequence'].next_by_code('shredding.service.log') or _('New Log')
    vals['date_created'] = fields.Datetime.now()

        logs = super().create(vals_list)

        for log in logs:
            log.create_naid_audit_entry()

        return logs

    def write(self, vals):
        """Override write to update modification date and audit trail."""
    vals['date_modified'] = fields.Datetime.now()
        result = super().write(vals)

        # Create audit entries for significant changes:
        if any(key in vals for key in ['state', 'weight_processed', 'quality_check_passed']):
            for record in self:
                record.create_naid_audit_entry()

        return result

    # ============================================================================
        # VALIDATION METHODS
    # ============================================================================
    @api.constrains('start_time', 'end_time')
    def _check_time_sequence(self):
        """Validate that end time is after start time"""
        for record in self:
            if record.start_time and record.end_time:
                if record.end_time <= record.start_time:
                    raise ValidationError(_("End time must be after start time"))

    @api.constrains('weight_processed')
    def _check_weight_processed(self):
        """Validate weight processed is positive"""
        for record in self:
            if record.weight_processed < 0:
                raise ValidationError(_("Weight processed cannot be negative"))

    @api.constrains('container_count')
    def _check_container_count(self):
        """Validate container count is positive"""
        for record in self:
            if record.container_count < 0:
                raise ValidationError(_("Container count cannot be negative"))

    # ============================================================================
        # UTILITY METHODS
    # ============================================================================
    @api.model
    def get_daily_summary(self, date=None):
        """Get summary of operations for a specific date""":
        if not date:
    date = fields.Date.today()

        logs = self.search([)]
            ('start_time', '>=', date),
            ('start_time', '<', date + fields.timedelta(days=1)),
            ('state', '=', 'active')
        

        return {}
            'date': date,
            'total_operations': len(logs),
            'total_weight': sum(logs.mapped('weight_processed')),
            'total_containers': sum(logs.mapped('container_count')),
            'total_duration': sum(logs.mapped('duration_minutes')),
            'operations_with_witness': len(logs.filtered('witness_present')),
        

    def toggle_active(self):
        """Toggle active state"""
        for record in self:
            if record.active:
                record.action_deactivate()
            else:
                record.action_activate()
